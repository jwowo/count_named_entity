Hey everyone! We have now updated all 18 of the official runtimes to support all the features in Spine: bounding boxes, keyable draw order, events -- everything. We've also been working on stability, fixing bugs, and adding minor features to help productivity. For example, hotkeys are now configurable , attachment transforms can be copied , and the timeline is now above the dopesheet. We will be working through the remaining handful of minor stretch goals in the coming weeks. When we started Spine, we had vision of exactly what we wanted from a 2D skeletal animation tool. We've built a great tool and, thanks to all your support, have almost two dozen official runtimes. From where we are now, again we can clearly see the road ahead. We have a plan to really take Spine to the next level. To reduce our budgetary pressure and ensure we have the time see our plans come to fruition, we have decided to do a new Kickstarter to help fund four amazing new features: Spine Features Kickstarter Backers of the original Kickstarter already have a Spine Professional license, so will already get all of the new features. If you would like to support us again, fantastic! Otherwise, be sure to check out the new Kickstarter video to see where we hope to take Spine in the future. Of course, just spreading the good word about our project would be great too! We have released bounding boxes! This allows you to attach polygons to bones, then at runtime you can use the polygons to do hit detection, for physics simulation, etc. A bounding box is an attachment and goes in a slot, just like an image, so can be changed by animations or at runtime as needed. This can be useful when you have multiple items to equip which have a different bounding boxes. Also, a bounding box is translated, scaled, and rotated by the bone it is attached to. We've been focusing on editor features, so currently some of the runtimes are missing bounding boxes, keyable draw order, and events. We will change gears and bring the runtimes up to date very soon! We've been doing some R&amp;D and have a pretty exciting feature to announce: free form deformation! While we didn't make the final Kickstarter goal, we know this is a very important feature and have decided to do it anyway. It will enable Spine to handle many types of animation that would otherwise be difficult. Also, images can be deformed to cover problematic areas such as joints, which would otherwise require new images to fix. FFD reduces the amount of art needed even further! We are very close to having all the Kickstarter goals and stretch goals complete. All of the major tasks are done, we just need a bit of time to clear out the smaller tasks, then we can all celebrate! We really appreciate everyone's patience during the past 7 months while we've been working on Kickstarter goals. We are almost there! We've completed the keyable draw order stretch goal! You can now change the draw order during animations without using multiple slots. To use it, switch to animate mode and change the draw order in the tree, then click the key dot next to Draw Order in the tree. Similar to events, the visibility dot next to Draw Order can be used to hide the draw order keys in the dopesheet. If you're interested in some of Spine's history, our experiences building the tool, and the technologies used to do so, then be sure to check out our blog post from last week, A Childhood Dream Come True: Building Spine . In other news, the dopesheet has gotten some fancy new icons ! We've been hard at work in the 2 months that have passed since the last update. In that time we've done 37 releases, which averages to a release every other day! As always, you can see release details in the changelog . The most notable new features are probably the event timeline and integrated texture packing. The event timeline allows you to specify events during your animations, then at runtime you can take some action such as playing a sound or spawning particles. Integrated texture packing means you can pack your images into a texture atlas when you export your skeletons from Spine. You can even use the Spine texture packer for general packing purposes, for use without Spine. There are also many other new features: * Key adjust mode enables editing many keys all at once for quickly adjusting entire animations. * Key shift mode makes it easy to drag all subsequent keys. * Playback options. * Multiple slot drag and drop. * Background images. * A number of new features work together to create a new skeleton setup workflow . * Ghosting is shown off in the ghosting video . * Lots of smaller features, some of which are shown in the quick tips video . * Tons of minor tweaks and bug fixes. We are closing in on finishing all the Kickstarter stretch goals. Most of the largest and hardest goals have been completed and we hope to get the rest done very soon. Thank you all again for supporting Spine! Onion skinning is now available in v1.4.01+! It is actually called "Ghosting" and is accessed via the Ghosting button just above the dopesheet. The core of our vision for this feature is there, though it is very new and may see some minor tweaks. This is a powerful feature that has many uses. We will make a tutorial video in the next day or two detailing its usage. Enjoy! It's been a while since our last update, but rest assured we haven't been slacking off! :) Check out our runtimes page , where we have 17 official runtimes and 21 third party runtimes available. The runtimes will continue to evolve, but you can now use Spine out of the box with pretty much any game toolkit. If not, you can easily extend a generic runtime or base a new runtime on an existing one. Our initial Kickstarter goal was for more Spine runtimes and we very much appreciate all your help in making this a reality! We've also begun implementing editor features. First, you can now disable automatic updates. To enable this, you will need to download and reinstall Spine using your private download link. After that, you can choose a specific version to use in the settings dialog . Many new features will be introduced over the next few weeks. We've already implemented automatic keying, exit confirmation, additive blending, disabling scale and rotation inheritance, a dopesheet overview, and many other small features and bug fixes. As always, keep up to date on Spine happenings by checking the changelog and Trello boards for the editor and runtimes . Drop by the Spine forum if you have any questions or just want to show off your work. We are happy to announce the generic AS3 runtime is available! As usual, you also get a bonus runtime that wasn't promised in the Kickstarter: Starling ! You can see a Starling example here (click him to jump). The Torque2D runtime is almost complete . We are working with GarageGames on polishing the last bits of the API so all the functionality is available through TorqueScript. Better integration for Unity's 2DToolkit will be done soon (we haven't forgotten about you!). This leaves only one runtime remaining, JavaScript, then we can finally move on to editor features. Whew! Be sure to check out Ravenous Games' Ludum Dare 26 entry, Super Sword and Shuriken , which is a really cool Unity-based game that uses Spine. The generic Lua runtime is now available! spine-corona has been refactored to use it. As a bonus, an official LÃ–VE runtime is also available. Enjoy! Implementing all the runtime over and over (and over) for various toolkits in multiple languages has highlighted where things can be improved. I've just committed some refactoring for all the official runtimes (except spine-corona, which will see some attention soon). I'm now pretty happy with how they are working, so it is unlikely that there will be further refactoring like this. Sorry if this breaks your code, but it shouldn't be too hard to fix up. Most classes now only store data, without anything specific to rendering. The exception is an atlas page, which needs a reference to the texture for that page. Writing a renderer just means going through the data objects and rendering them. Extending a generic runtime is cleaner and takes very little code, especially for spine-c which now uses much less weird C OOP. Eg, extending spine-c for SFML is done in ~100 lines of code . This refactoring also enables use of an atlas with multiple backing pages for C#, XNA, cocos2d, and cocos2d-x. SFML is now the only runtime that supports only a single page atlas. We now have a pretty solid foundation for the existing runtimes. Up next is to bring spine-corona up to date, separate it into a generic Lua runtime, finish the Torque2D runtime, and create something for 2D Toolkit users. We are happy to announce that the Unity runtime is now available, as well as the generic C# runtime which it uses under the covers. As a bonus, we've also implemented an official XNA runtime, which means your XNA and MonoGame projects can now use Spine. XNA and MonoGame weren't in the Kickstarter goals, but we are happy to have them officially supported. The Unity runtime was implemented without any dependencies on other Unity plugins. We have yet to see if Futile or 2D Toolkit would benefit from code specific to those plugins. With libgdx, Corona, cocos2d, cocos2d-x, C/C++/ObjC, Unity, C#, XNA, and SFML under our belts, we have now met the original Kickstarter goals, as well as some of the stretch goals. The runtimes still remaining are Torque2D, AS3 and JavaScript, then we'll move on to editor features. We now have 8 videos on our videos page . These show how to use various aspects of Spine, so be sure to check them out! We are working on more, such as a video that demonstrates how skins are used. Maintaining the changelog has been a bit of a pain to keep up to date, but I know people are curious about what goes into the new builds and the Trello boards only give a high level view of what is being done. I'm going to try to keeping it up to date again, but only for editor features. For a more granular look at what is being done on the runtimes, I suggest reviewing the github commits . Other than some relatively minor features, we're still working on runtimes. The C# and Unity runtimes are coming together and we hope to have something to show soon! Recently it came time to tackle the cocos2d-iphone runtime. No one likes mixing C++ with Objective-C and they are right, it's nasty business. Ultimately we decided to write a generic C runtime from scratch. This allows us to service C, C++, and Objective-C game toolkits with a single codebase. It is also very portable and can easily be wrapped to support other languages, such as Python. We are happy to announce that the cocos2d-iphone runtime is ready for use! It is based on the generic C runtime ( spine-c ), but provides a small Objective-C API to integrate better with your cocos2d code. Using it looks like this . The other news we have is that we decided to make an organizational change to the Spine export format. Previously a skeleton was exported as a skeleton file and a number of animation files. This has changed to just a single file containing both the skeleton and all the animations for that skeleton. This makes loading skeletons faster, especially on mobile where SD card access is slow. A few hundred animations could take a multiple seconds to load if they were in separate files. Also, since this change stores animations centrally on the SkeletonData, runtime APIs are improved by allowing animation look up by name. For those worried about loading all animations at once, don't fret. It really is not much data, even with many hundreds of animations. In the highly unlikely case where someone needs to load a subset of the animation data, it would be trivial to modify the JSON loader for the runtime you are using. The documentation and official runtimes have all been updated to handle the new format. We know there are a number of projects that have code using the old format. We are sorry if you have to change your code! The changes should be easy though. The data itself was not changed, only where it is located, so all your existing parsing code can be reused. We don't change the format lightly, but decided there are enough benefits in this case to warrant the change. We continue plodding along. We will be releasing the Unity and Torque 2D runtimes soon, then we only have JavaScript, AS3, and Lua left! We are super anxious to get the runtimes behind us so we can work on new editor features. It's been a while since we did an update. Rest assured we are steadily making progress! Be sure to watch the editor and runtimes Trello boards to stay up to date. Subscribe to a board or individual tasks to get notified of any progress. The generic C++ runtime is now complete, as well as the SFML and cocos2d-x runtimes which use it. Soon we will also have the cocos2d-iphone and Torque2D runtimes complete, then we'll move on to Unity and C#. After an initial stall due to fixing up some issues with the Spine editor, runtime development is picking up speed! In other news, we have some new videos available to help you be more productive when using Spine. Also be sure to see the advanced examples from the coding workshop which demonstrate mixing, procedural animation, Box2D integration, and more. More videos and proper documentation is in the works! Starting in version 1.2.0, Spine has all new code for dealing with OpenGL, which is used by the editor for all rendering. This affects a lot: window creation, OpenGL initialization, drawing, input handling, etc. Stability on the Mac should be much improved. Note this only affects Macs -- Windows and Linux are unchanged. We'd be very grateful if you can try it out and report any issues you find in the forum post . The new backend took quite a lot longer than we planned. Special thanks to Mario Zechner for wrapping GLFW so it can be used from java . You can see from the commit logs it has been a whole lot of work . There may be a few kinks over the next couple days, but we are happy to get this behind us and to start working in earnest on the runtimes. Time for a Spine update! We've been working hard on a number of things that will increase our productivity over the coming weeks. First, Spine now has installers for Windows and Mac and will automatically download updates, so you always have the latest. This allows us to quickly fix bugs and push out new versions to everyone. Also, Spine bundles it's own JVM now so we are no longer at the mercy of whatever JVM users have installed, resulting in fewer setup issues. We know that everyone is anxious to hear when their favorite runtime or feature will be done. We'd love to give super accurate estimates, but in software development that isn't usually a great idea for many reasons. Instead, we'll give you as much insight as possible into what we are working on currently and what we will work on next. We'll also show the entire backlog of work that is planned. I personally dread project management tools. I'll take indented plain text files any day! However, something more is needed to make Spine's development more transparent, so we've begun using Trello. You can watch our progress on our Trello pages for the editor and the runtimes . You can vote and comment on tasks, and we will keep the votes in mind when choosing what to work on next. Kickstarter goals are marked green, major tasks are yellow, GitHub issues are red. We also needed a better way to accept issues and suggestions from our users. We've decided to use the GitHub issue tracker. You can report bugs or suggest features on our GitHub pages for the editor and the runtimes . New issues automatically appear in the Backlog on our Trello pages, so you can see how they are prioritized. There are still a few issues with OpenGL on the Mac. We will be solving these soon with a whole new OpenGL backend (via GLFW) for all operating systems. Beyond that, we are working hard on the Kickstarter goals and will keep everyone updated with our progress! In other news, the Artist Workshop was a success and we will be sending out the video soon. Next Saturday (March 9th) is the Coding Workshop at 12:00pm PST. Invites will be sent out via email in a few days. Don't miss it! It has been an exciting ride, but finally the Spine Kickstarter is over. Just over $67k was raised and every single stretch goal was hit, except for free form deformation! We are extremely excited about this chance to really bring Spine to a new level, and we owe it to all of you, our backers. Thank you all so much for putting your faith in us! We won't let you down! We've just emailed all the license keys to everyone for which Kickstarter says payment has cleared. Some payments can take 36 hours to clear, so we will monitor them and periodically send out more licenses. If your payment failed, you will get an email about it and 7 days to fix it. If you are receiving multiple licenses, look for a separate email with each license. Many people have asked if we will implement free form deformation even though we haven't hit the stretch goal. The answer is... well, maybe. ;) The initial goals and all the stretch goals are an enormous amount of work. Once finished with all those we'll reevaluate and see if implementing deformation makes sense at that time. We know how nice it would be to have and we want it as bad as you, but we've got to stick with our priorities. :) We will continue to send Kickstarter updates as we make progress on the goals. You can also stay tuned to our blog and we hope to see you on our forums. Thanks again for supporting Spine! Just a quick update to let you know that we've reached all the stretch goals, except for free form deformation! Woohoo! :) Only 3 hours to go. We've been making great progress on the generic C++ runtime , which is now fully functional. We needed an easy way to test it, so we've also built a runtime for SFML , a C++ desktop multimedia library. Everything is working -- skeletons and animations can be loaded and played! Keep in mind we are still actively developing on it though, so the code may still see a bit of refactoring. The Kickstarter has reached tons of new goals! Spine will soon have an integrated texture packer along with lots of other great features. Especially exciting is that we just hit the Event Timeline goal! This will enable events to be timed with animations, eg to play sounds or spawn particle effects. There are only 3 goals left and it would certainly be amazing to hit them all, especially free form deformation! We now only have 19 hours to go. As soon as the Kickstarter is over we'll send out the full version of Spine to everyone. We are very excited to see what you guys build with it! Thanks again for supporting our project! :) The official Spine runtimes are now open source! You'll find them on our github account . Please keep in mind that they are currently under development. The generic C++ runtime is not complete. All the runtimes are subject to change until the dust settles. They are released under the Simplified BSD License , meaning you can use the code in closed source software. Spine is now up to version 1.0.15. This has a number of important fixes for stability. See the changelog for more information. We've been blowing past stretch goals like never before. We've reached both the keyable draw order goal AND the bounding boxes goal! These will go a long way toward integrating game logic with your animations. The next goal is for an integrated texture packer and a number of other very useful features. Hopefully we make it there in the next couple days, because the Kickstarter is coming to an end -- less than 3 days left! It has been really amazing to have so many of you show so much interest and enthusiasm in Spine. We really appreciate all of you putting your faith in us. We are working hard and won't let you down! :) We're happy to announce we've reached our first major feature goal: onion skinning! This displays "shadows" of the skeleton that show where it was in the past and where it will be in the future, allowing the animator to make better decisions about an in-between pose. The next stretch goal up is a nice collection of features. These add some great functionality, especially the ability to key draw order! SÃ¸ren has put up part 2 of his quick overview videos intended to help users new to Spine quickly get acquainted with the workflow. This time he goes more into details on animating workflow, posing, setting keys, etc. It's up on our videos page and also below, so check it out! Today Nate has been working on bugs and stability while still toiling away at the generic C++ and SFML runtimes. We hope to have all the runtime source up on github tomorrow! www.youtube.com/watch?v=Eg7M43MoPu8 The Spine Kickstarter has passed the C# goal! This means that we will create generic runtimes for all of the major languages that we targeted: Lua, JavaScript, C++, AS3, and C#. The stretch goal up next is Onion Skinning, which is the first major non-runtime feature and will be super useful to visualize movement over time while tweaking animations. SÃ¸ren has created a quick overview video that will help users new to Spine quickly get acquainted with the workflow. It's up on our new videos page and also at the end of this update, so check it out! Nate has been heads down for some time now, working hard in C++ land. Progress is going great and within the next few days we will have support for the SFML game toolkit! This will help validate the Spine C++ code, then cocos2d and cocos2d-x will come soon after. After that we will do Unity Futile and 2DToolkit, then move on the stretch goals. In the next few days we will release all of the official Spine runtimes under the BSD license on github: libgdx, Corona, and SFML, as well as all future runtimes. This will enable the community to see our progress, easily fork the official runtimes, and submit pull requests. We believe this is the best way for Spine to gain widespread support on all kinds of toolkits. There are less than 5 days left for the Kickstarter! If you can tweet, blog, or otherwise spread the word about Spine, that would be fantastic! :) <url>~$1300 from the Generic C# goal! This is fantastic because it means all of the most common languages will have generic runtimes, and also that we are close to reaching some really cool feature stretch goals, such as Onion Skinning. We did a new release today, version 1.0.10. This fixes some minor issues as well as some major ones. Most notably it fixes some issues when running with Java 7 on a Mac. Even though the Kickstarter isn't over, we're working hard on Spine so we can reach the goals as soon as possible. There is only about a week left, so be sure to spread the good word! :) It's been a couple of very busy days here but it's time for a little update. Yesterday we added another pledge level at $45. This pledge and all pledges greater than it, gives you an automatic spot on our featured page on <url>Ã¸ren We've hit our goal for creating a generic JavaScript runtime! This means users of PlayN, Construct 2, cocos2d-html5, and other JavaScript-based toolkits will be able to support Spine relatively easily since everything except the toolkit specific rendering will be taken care of. We will be happy to provide assistance and even implementations for these toolkits once the Kickstarter goals are fulfilled. The next goal is the generic C++ runtime. We know there are many C++ users and toolkits out there, so please help us reach out and spread the good word! :) Thank you all for your continued support! Be sure to check out the Artizens Kickstarter which will be using Spine to do their animations! After much deliberation, we finally came up with stretch goals for Spine! The number of requests we've received about which toolkits to support has been mindblowing. We really want to make everyone happy and we think we have come up with a great approach: by providing generic toolkits for many programming languages, implementing new runtimes becomes a breeze. This has all the benefits of officially supported and maintained runtimes, but also allows the gaming community to easily implement their own. We can work together with the gaming community so Spine can support any toolkit! Please check out the Spine Kickstarter page to see the stretch goals. We are really excited about the future of Spine! We've already seen some really great work done with Spine. For example, here's a work in progress animation provided by ODI EntertainmenT, a fire dragon for their game Dragon Warrior (working title). Note: This is a 15 fps GIF sequence, the final version running in the game will look much smoother. We've drawn a lot of inspiration from the huge response to the Spine Kickstarter and we've been hard at work. In only a week and a half we've done nine releases to improve Spine, add small features, fix bugs, and improve the runtimes. Tonight we uploaded version 1.0.8 which includes a new Spine runtime for Corona . Now you can easily use Spine animations in your Corona games! Join us tomorrow where we will make a cameo appearance on Corona's Google hangout . We mean business and are already moving on to the cocos2d and Unity runtimes! We realize that everyone wants to know what our stretch goals will be, but we want to be sure before making more promises. We can say that our stretch goals will be more runtimes and some useful, evolutionary features. Please stand by for more details (soon!), but in the meantime you can trust that we will do everything we can to make official runtimes available for all the popular game toolkits, as well as help those in the community that want to develop their own. Thanks so much to everyone for your support! The response from the gaming community has been phenomenal! It is really fantastic to see everyone so excited about Spine. Lately we've been working on a few things. You can see the full changelog . We've fixed a number of small bugs and added some minor features. We've added an import feature so data can be brought into Spine from other applications. We've been working on the libgdx runtime, adding some mandatory features in anticipation for developing runtimes for other game toolkits. We will start on other toolkits most likely in the next day or two. We plan to get the promised toolkits complete as soon as possible so we can implement even more toolkits. We won't say exactly which ones yet, as we don't want to over promise, but you will know as soon as we are sure!