@Stelios - I understand your frustration. Incidentally, I made a mistake. As of November last year, the US Postal Service does in fact allow shipping of Lithium Polymer batteries internationally if they are installed in a product. That should reduce the price difference for most customers to $10 or less. I will be posting an update about this shortly. @Koen - Either one is fine. @JYQ - Please send me a message and we'll sort it out for you. @Daniel - If you aren't in the US, you need to pay the shipping difference. Please send me a direct message and we can get it sorted out. @Thaan - You can do this now. You can enable remote access on an mPrint and setup external handlers of any type you'd like. There is also a key/value store that you can use to save data. There are a few updates in the works to make it a little smoother and more obvious on how to achieve this, but I'd be glad to walk you through it if you'd like. After logging into the website, click on the "Support Chat" link and there is a live chat room. @Thaan - In mm, the paper is 80mm wide with a max diameter of 50mm. Sometimes it's called 119', but you have to check the max diameter because sometimes there is a large core. @Jose - We've played with two ideas. One is assigning each mPrint an email address you can email to, which will trigger a callback in your print and you can do whatever you want from there. The other is allowing you to receive inbound SMS messages and handle them similarly. @badger - I show you getting a WiFi model. However, yes, it is the same circuit board. Along with the module, a few filtering capacitors and some resistors may be left unpopulated. Currently, the determination of whether or not a WiFi module is present is handled purely in code. Depending on how long that module has been in your drawer, be careful - the early firmware versions had some nasty bugs (i.e. the interrupt pin not working right at all). @badger - After recording video today I think I need to take that to heart! I just put up a 15 minute video that covers some of the physical aspects of the printer, as well as delving a little bit into the Javascript backend. @Alban - Sorry for the delay, still getting it together. I'll have another text/photo update up in the next couple of days and the video ASAP. The video update is coming ASAP, but in the meantime check out some new blog content: <url>" head. The electronics are working great. We had a few hiccups with the TCP/IP stack that seem sorted now. Also, I'm adding a latching pushbutton power supply switch. The single button on the top of the printer will be the on/off button, as well as an action button. The circuit to do this is relatively common, but we're adding a microcontroller so it can be used for general I/O as well. It can detect things like a long press, three quick presses, etc. I'm going to release that design an code ASAP, since I can't believe anything like that is already out there. Working on a mini update to go up later today, and hopefully a video one around this weekend with some live printing samples, code samples, and more. The 3D fab house is printing the latest revisions and told us they'd get us some behind the scenes photos of the process. As soon as we get it back, I'll make sure to do a fully detailed update! Very cool article about the project on Mashable as part of their Leaders in Design series: <url>"Network" controller in "Settings" on your phone). @matthias - Personally, I'm also a bigger fan of AVR and ARM. However, worth noting, PIC does have free tools for Linux and OSX. @sippakorn - Yes, it will support 220V. @wyko - As Max pointed out, there will be an optional battery. We'll have more specs on it once we finalize the details. Also on the to-do list with no finite ETA yet are a car adapter (for a cigarette outlet) and a neoprene belt/waist case. @markus - Currently, the design offloads control of the print head (there is a lot of I/O there) to an LPC1114 ARM. They are inexpensive, fast, and have a good development environment. The primary MCU will be an PIC24F or Atmega32u4. There is a 16 Mbit flash for print queue and general storage. @darren - No plans to make the case design "cute" :) It will be minimalist and look at place on your desk at home, in a warehouse, or a restaurant. I just got the WiFi module and other code talking nicely to an Atmega32u4. That's interesting, because it opens to possibility of making the control board Arduino compatible. I was leaning towards using a PIC24/PIC32 (what our current prototypes are using) because the Microchip TCP/IP stack is more robust, but would love to get feedback. By using an Atmega32u4, the control board could basically be an Arduino Leonardo. Assuming we can get a custom USB profile to play nice and there is enough RAM left over for the print head control, it may be a possible way to have an easy IDE (the existing Arduino one) to implement custom firmware. Thoughts? @bill - I'm aware of the Little Printer. The competition is welcome, but I think we beat it out in all categories: price, connectivity, portability, and API. The documentation I've seen on their publishing platform makes it seem like it will be somewhat closed and limited to HTML. @max - Thanks for the link. The TCP/IP stack we're using supports Zeroconf, which is part of the AirPrint magic. Even if it's not something we can get in, I think the possibility of it being supported via a firmware upgrade are pretty good. @frank and @marc - After some more research, it appears AirPrint can utilize CUPS-compatible print servers. In theory, it MAY be possible to make the mPrinter AirPrint compatible. I'm going to do some more digging. @badger - Yes, there will be a bootloader to allow firmware changes/upgrades directly over the built-in USB port. Hey guys, I'm not getting alerts on all these comments. If you have something specific to ask I generally reply to direct messages within an hour. Based on feedback, we're currently leaning toward adding a few things: 1. An RGB status LED - you will be able to set the color via the API 2. Multiple buttons (at least two) 3. An internal piezo buzzer to play basic sounds @joseph - One of the original ideas was to use capacitive touch buttons - they are inexpensive and could be programmed to do different things. @michael - Thanks for the idea. The footprint is rather large, but once the board design is finalized I'll see what room is left over. @brendon - The printer API will be open, so you can send data directly to it to print. It does not have to be from our website. The website will host the Javascript environment, so that is currently the only place those prints will arrive from (they can be triggered from anywhere). @max - Yes, the API will be available at launch. We'll put together a sample iOS project. More updates coming soon. @ptorrone et al - The original prototypes were indeed off the shelf thermal printers from Sparkfun and/or Adafruit (I have some from both and don't remember which is which). I utilized a standard Arduino, which allowed for the rapid development of prototypes and initially focusing on backend software instead of hardware. I am aware of the Go Free Range printer project, and it is some nice work. However, the backend is in Ruby - which I'm not a big fan of. Our backend system uses PHP and Node.js that handles sandboxing mPrints, queueing, etc. The prototypes didn't really use any thermal library - since they just parse the byte commands the server tells them to. After the Arduino-based prototypes, I moved on to the Microchip MRF demo board which utilizes a PIC32. The PIC32 is slightly overkill (and expensive) for our usage, so the newest prototypes use PIC24Fs. Our 2 and 3" print heads are Fujitsu clones. They have a 30-pin interface that is essentially a big shift register. We are now driving this directly, and our control board has it's own stepper driver and connects straight to the print head. Personally, I'm a bigger fan of AVRs. However, based on Microchip's TCP/IP stack maturity it really seems like we'll be going with a PIC24. If it all possible, I'm going to open it up for voting and get some community feedback. As noted in the original description, we will be releasing the firmware and hardware designs for the printer as open source. I haven't yet determined the license or where in our production timeline that will happen. I look forward to blogging about the prototyping and manufacturing process and I'd be happy to answer any more questions. @Fabio- No 4" heads - they are quite expensive. Bluetooth was initially considered, but it's expensive to add. AdHoc WiFi and/or setting up the printer as the hotspot is the current replacement for scenarios where there is no network available. A cutting head is unlikely - they more than double the cost of the mechanism and add a lot of bulk. The paper rips cleanly. @Martin - Yes, we actually process images as halftones prior to printing. There has been a lot of experimenting with different halftone patterns. I'll get some samples up. There may also be some creative things that can be done to achieve a faked grayscale in firmware. I highly doubt this will be in the first revision, it's just an idea, but by modifying the burn time of individual dots you can make some appear lighter (in reality, the dot is just smaller and "bleeds" less into the surrounding dots). Guys - thanks for all the input. The RGB LED as the status is a fantastic idea, and I have played with a buzzer for when there is a print available. Keep the ideas rolling! More updates soon - we've been doing a lot of work on the 3" print heads. Chris and Darren - We'll come up with something. This has been a popular request. Eric - yes, the API and remote trigger interface will be made fully open.