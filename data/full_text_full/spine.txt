HQ video "I am a huge fan of Spine. The tool is absolutely amazing. Looking forward to having Torque 2D utilizing Spine!" -Michael Perry, GarageGames "Spine is great! Finally a huge void in our 2D content creation process is filled; something no other animation tool on the market could do for us." -Moritz Voss, HandyGames "Spine is the 2D skeletal animation tool that game devs have been hoping for. It's well designed and well engineered." -Matt Rix, Unity Futile Spine is a 2D skeletal animation tool for game development and other animation projects. It features an intuitive workflow to rig and animate skeletons, a multiple-timeline dopesheet for retiming and tweaking animations, and powerful exporting capabilities. Spine currently has all the features necessary to use it in production, except for loading and using the data in your games. For each game toolkit, we need to write a runtime library that loads the animation data and draws the animations. Currently this is only done for libgdx, and this is where we need your help. We set out to build games, but instead we’ve been working full time on Spine for many months. We would love to add Spine runtimes for Unity, cocos2d, Corona, and others, but we also need to move on and build our own games. Funding this KickStarter will allow us to postpone our games a little longer to add support for additional toolkits and enable Spine to be used in all kinds of games. With your help, we can build the runtimes to match the same level of quality as the rest of Spine, and official runtimes will be kept up to date as Spine evolves. Our Kickstarter has been funded! This means we will implement Spine runtimes for these game toolkits: Unity: Futile and 2D Toolkit cocos2d-iphone Corona You can download Spine and give it a try right now for Windows, Mac, and Linux. All of the most important features have already been implemented and hopefully this gives you confidence that we can deliver the runtimes we promise. We hit our goal for the four runtimes in just 3.5 days! The gaming community's response to Spine has been really fantastic! We've already added support for Corona and are working on the other three toolkits promised in the original goal: Unity Futile, Unity 2DToolkit, and cocos2d-iphone. In the meantime, we have been thinking a lot about what to do for stretch goals. We've received hundreds of requests to build Spine runtimes for all kinds of gaming toolkits. We would love to build official runtimes for everyone's favorite toolkit, but this would take an astronomical amount of effort. We have thought long and hard about what our stretch goals should be for Spine and finally decided we could do better than listing a bunch of game toolkits, each of which only a fraction of the gaming community cares about. We think we have come up with a way to make everyone happy. We have stretch goals to implement generic Spine runtimes for specific programming languages. A generic runtime does everything except the game toolkit specific drawing. It loads the skeleton and animation data into an object model that makes it easily accessible, for example to pose the skeleton, do procedural manipulation, changes skins, etc. To support a game toolkit, all that needs to be done is add the game toolkit's rendering to the generic runtime. This allows the gaming community to easily make high quality runtimes for almost any game toolkit. The key part of this plan is that the core of the runtimes are officially supported and maintained as Spine evolves. We have also added stretch goals for some really awesome features. When building Spine there were many things that couldn't make it into version 1.0. We choose from all those as well as features suggested by the Spine community. We are very weary about feature bloat, so we have been careful to choose the features that provide the most value when taking into account Spine's workflow. We also took into account how feasible the features are and we only chose those that we know we can implement in a timely manner. It is very important to us that we don't let you down! We are extremely excited about Spine's future and really hope we can meet many of these stretch goals. Please help us bring Spine to the next level and make it the most amazing tool for game development! Touchpad support Spine was designed for use with a mouse. When using a touchpad, for example on a laptop, Spine can be difficult to use. This item adds a touchpad friendly input mode. We may not be able to support multi touch touchpads, but will be sure that the app is perfectly usable with a touchpad. Additive blending for slots Enables the images attached to a slot to be drawn using additive blending, for toolkits that support it. Adjustable playback speed and framerate Enables slowing or speeding up playback so animations can be tweaked easier. Also allows the framerate used in the timeline to be changed. Resizable dopesheet and tree Enables the dopesheet and tree to be resized by dragging. This allows a lot more to be seen on larger screens and is especially great for tweaking keys in the dopesheet. Import for exported skeletons and animations Allows data in the same format Spine exports to be imported back into Spine. This allows data to be brought into Spine from other programs. Also, data can be exported from one project and imported into another. A Spine runtime in the Lua programming language. This enables easier development of Spine runtimes for Gideros, LÖVE, Moai, and others. A Spine runtime in the JavaScript programming language. This enables easier development of Spine runtimes for Construct 2, cocos2d-html5, Platino, ImpactJS, three.js, and others. A Spine runtime in the C++ programming language. This enables easier development of Spine runtimes for cocos2d-x, Kobold2D, KoboldTouch, SFML, and others. A Spine runtime in the ActionScript 3 programming language. This enables easier development of Spine runtimes for Flixel, Starling, and others. A Spine runtime in the C# programming language. This enables easier development of Spine runtimes for MonoGame, XNA, and others. Onion skinning draws a shadow of the frames before and after the current frame to give some idea of the previous and next motion of an object. This is very useful when refining animation movement by adding keys between major poses. Keyable draw order Allows draw order to be changed and keyed in animate mode. This allows a slot to move in front or behind other slots during an animation. Duplicate bone Makes a copy of a bone, any child bones, and any slots and images. This is useful when creating skeletons that have multiple similar bones or body parts. Bone snapping When moving a bone, this snaps to the start and end of other bones. This makes it easy to build skeletons where the bones match up exactly. Disable rotation/scale inheritance This allows rotation or scale to not affect a child bone. For scale, this means additional keys are not needed to avoid a child being scaled. For rotation, this allows a child bone to not rotate with the parent, for example a rope hanging from the end of a crane. These are boxes attached to bones, similar to how images are attached. The boxes represent where the skeleton can be hit. In your game you can easily test for hit detection. Integrated texture packer Enables Spine to pack individual images on to larger images for more efficient use by your game toolkit. Graph presets Allows graph curves to be stored so they can easily be applied to other keys without needing to define the curve again. Multiple slot color modification Allows multiple slots to be selected and have their color changed all at once. Multiple drag and drop for slot draw order Allows multiple slots to be selected under Draw Order and dragged to a new position all at once. This adds an "Events" node to the tree where named events can be defined. These events can then be keyed in animations. This allows events to be triggered in your games, for example to play a sound or spawn a projectile or particle effect at a specific time in an animation. Slot image chooser A popup for a bone that shows thumbnails for all images for each slot. Choosing a thumbnail sets a key to change the slot's image. Note changing a slot's image in an animation is already possible, this is just a faster way of doing it. Animated textures This allows image with a common prefix to be treated as a single images. They are given a framerate and are displayed as an animation. This is much easier than keying each image change. Backgrounds This adds a "Background" node to the tree where images can be dragged. These show up behind the skeletons in the editor. This can give a better feel for how the skeletons will look in-game. It can also be used to animate skeletons for use on top of a specific image, for example to animate a skeleton climbing on top of objects in the background image. Ripple animation Repeats a dopesheet channel for the rest of the animation. Without this, repeating an animation manually for a whole animation is very tedious. Dopesheet overview This is a dopesheet item that represents all keys in the animation. This makes it easy to select, scale, etc all keys. Disable dopesheet channels This disables a dopesheet channel so it won't affect the animation. This is useful for disabling portions of an animation during tweaking. Free-form deformation allows an image to be manipulated by moving the four corners or points along the edges. The image will distort appropriately. This reduces image changes, meaning a lot less art is required. It allows for much more powerful animation beyond just animating bones. There are many tools for working in 3D that can be used for 2D, though they tend to be very expensive. Custom plugins need to be written to have a sane workflow for 2D skeletal animation and to extract the data for use in your games. You must write your own runtime for your games to make use of this data. These tools tend to have an enormous feature set and you must be careful to avoid accidentally using features that aren't supported in your runtime. All this is a lot of work up front to get the custom plugins and runtime working, and the end result is a clunky workflow riddled with gotchas. There are not many tools dedicated to 2D. We will mention a few here. Adobe's Flash is ubiquitous on the Internet and can be used similar to Spine. It is not dedicated to skeletal animation though, making the workflow somewhat tedious. Data is exported as XML, but there are no standard runtimes for game toolkits, you have to write your own. BrashMonkey's Spriter began development 15 months ago. We were initially thrilled when Spriter was funded on Kickstarter 9 months ago. We posted our feedback on the Spriter forums when we found it lacked official runtimes, a multiple-timeline dopesheet, tweening curves, and separate keying of scale, rotation, and translation. After a couple months we decided that Spriter may never have the features and workflow we envisioned, and that is when we decided to build Spine. Spine focuses on having an efficient workflow from start to finish. The best way to compare Spine with other software is to build a simple animation with each and put them in your game while noting how easily the tools allow you to tweak and refine your animations. Spine animation has many advantages over traditional raster animation: Reduced art assets Characters can be animated in many ways without requiring additional art. Small data size Spine animations are tiny, enabling hundreds of animations to be used throughout a game to bring it to life. Faster development Creating and making use of animations is easy, even programmers can do it. Animation reuse All of the same animations can be reused for characters that look completely different if they use the same skeleton. Procedural manipulation Modify the skeleton or animations at runtime to react to game situations. Smooth interpolation Interpolated keyframes mean animation is as smooth as the framerate. Animation blending Transition smoothly to a new animation by blending it with the old animation. Spine makes it fast and easy to bring your entire game to life! We've been working on Spine full time for a long time. We are excited to have completed all the major features it needs to be used in production and we are looking forward to seeing what the gaming community can build with it. There are many features we wanted to implement but were unable to include in the first version of Spine. We have been careful to avoid feature bloat and keep the workflow in mind, but these features would be very useful. If this Kickstarter does extremely well, we would love to implement these! Event timeline Allows timing arbitrary events during animations, eg to trigger sounds or particles. Bounding boxes Rectangles attached to bones for easier hit detection. Onion skinning Shows the previous and next animation frames so it is easier to see motion over time when designing animations. Procedural animation helpers Utilities to make procedural animation easier, eg a bone that is always rotated toward a point with rotation constraints. Box2D integration Control physics entities from animations or animations from physics entities. Image attachment animation Animate an image's scale, rotation, and translation separately from the parent bone. Freeform deformation Animate an image using a lattice for deformation. Inverse kinematics at runtime Allows for fewer keyframes and more flexible procedural animation. Animation layers Have an animation extend another animation and add keys. Animation mixer Similar to the dopesheet, but for blending and timing animations for cutscenes and larger animations. Hey everyone! We have now updated all 18 of the official runtimes to support all the features in Spine: bounding boxes, keyable draw order, events -- everything. We've also been working on stability, fixing bugs, and adding minor features to help productivity. For example, hotkeys are now configurable , attachment transforms can be copied , and the timeline is now above the dopesheet. We will be working through the remaining handful of minor stretch goals in the coming weeks. When we started Spine, we had vision of exactly what we wanted from a 2D skeletal animation tool. We've built a great tool and, thanks to all your support, have almost two dozen official runtimes. From where we are now, again we can clearly see the road ahead. We have a plan to really take Spine to the next level. To reduce our budgetary pressure and ensure we have the time see our plans come to fruition, we have decided to do a new Kickstarter to help fund four amazing new features: Spine Features Kickstarter Backers of the original Kickstarter already have a Spine Professional license, so will already get all of the new features. If you would like to support us again, fantastic! Otherwise, be sure to check out the new Kickstarter video to see where we hope to take Spine in the future. Of course, just spreading the good word about our project would be great too! We have released bounding boxes! This allows you to attach polygons to bones, then at runtime you can use the polygons to do hit detection, for physics simulation, etc. A bounding box is an attachment and goes in a slot, just like an image, so can be changed by animations or at runtime as needed. This can be useful when you have multiple items to equip which have a different bounding boxes. Also, a bounding box is translated, scaled, and rotated by the bone it is attached to. We've been focusing on editor features, so currently some of the runtimes are missing bounding boxes, keyable draw order, and events. We will change gears and bring the runtimes up to date very soon! We've been doing some R&amp;D and have a pretty exciting feature to announce: free form deformation! While we didn't make the final Kickstarter goal, we know this is a very important feature and have decided to do it anyway. It will enable Spine to handle many types of animation that would otherwise be difficult. Also, images can be deformed to cover problematic areas such as joints, which would otherwise require new images to fix. FFD reduces the amount of art needed even further! We are very close to having all the Kickstarter goals and stretch goals complete. All of the major tasks are done, we just need a bit of time to clear out the smaller tasks, then we can all celebrate! We really appreciate everyone's patience during the past 7 months while we've been working on Kickstarter goals. We are almost there! We've completed the keyable draw order stretch goal! You can now change the draw order during animations without using multiple slots. To use it, switch to animate mode and change the draw order in the tree, then click the key dot next to Draw Order in the tree. Similar to events, the visibility dot next to Draw Order can be used to hide the draw order keys in the dopesheet. If you're interested in some of Spine's history, our experiences building the tool, and the technologies used to do so, then be sure to check out our blog post from last week, A Childhood Dream Come True: Building Spine . In other news, the dopesheet has gotten some fancy new icons ! We've been hard at work in the 2 months that have passed since the last update. In that time we've done 37 releases, which averages to a release every other day! As always, you can see release details in the changelog . The most notable new features are probably the event timeline and integrated texture packing. The event timeline allows you to specify events during your animations, then at runtime you can take some action such as playing a sound or spawning particles. Integrated texture packing means you can pack your images into a texture atlas when you export your skeletons from Spine. You can even use the Spine texture packer for general packing purposes, for use without Spine. There are also many other new features: * Key adjust mode enables editing many keys all at once for quickly adjusting entire animations. * Key shift mode makes it easy to drag all subsequent keys. * Playback options. * Multiple slot drag and drop. * Background images. * A number of new features work together to create a new skeleton setup workflow . * Ghosting is shown off in the ghosting video . * Lots of smaller features, some of which are shown in the quick tips video . * Tons of minor tweaks and bug fixes. We are closing in on finishing all the Kickstarter stretch goals. Most of the largest and hardest goals have been completed and we hope to get the rest done very soon. Thank you all again for supporting Spine! Onion skinning is now available in v1.4.01+! It is actually called "Ghosting" and is accessed via the Ghosting button just above the dopesheet. The core of our vision for this feature is there, though it is very new and may see some minor tweaks. This is a powerful feature that has many uses. We will make a tutorial video in the next day or two detailing its usage. Enjoy! It's been a while since our last update, but rest assured we haven't been slacking off! :) Check out our runtimes page , where we have 17 official runtimes and 21 third party runtimes available. The runtimes will continue to evolve, but you can now use Spine out of the box with pretty much any game toolkit. If not, you can easily extend a generic runtime or base a new runtime on an existing one. Our initial Kickstarter goal was for more Spine runtimes and we very much appreciate all your help in making this a reality! We've also begun implementing editor features. First, you can now disable automatic updates. To enable this, you will need to download and reinstall Spine using your private download link. After that, you can choose a specific version to use in the settings dialog . Many new features will be introduced over the next few weeks. We've already implemented automatic keying, exit confirmation, additive blending, disabling scale and rotation inheritance, a dopesheet overview, and many other small features and bug fixes. As always, keep up to date on Spine happenings by checking the changelog and Trello boards for the editor and runtimes . Drop by the Spine forum if you have any questions or just want to show off your work. We are happy to announce the generic AS3 runtime is available! As usual, you also get a bonus runtime that wasn't promised in the Kickstarter: Starling ! You can see a Starling example here (click him to jump). The Torque2D runtime is almost complete . We are working with GarageGames on polishing the last bits of the API so all the functionality is available through TorqueScript. Better integration for Unity's 2DToolkit will be done soon (we haven't forgotten about you!). This leaves only one runtime remaining, JavaScript, then we can finally move on to editor features. Whew! Be sure to check out Ravenous Games' Ludum Dare 26 entry, Super Sword and Shuriken , which is a really cool Unity-based game that uses Spine. The generic Lua runtime is now available! spine-corona has been refactored to use it. As a bonus, an official LÖVE runtime is also available. Enjoy! Implementing all the runtime over and over (and over) for various toolkits in multiple languages has highlighted where things can be improved. I've just committed some refactoring for all the official runtimes (except spine-corona, which will see some attention soon). I'm now pretty happy with how they are working, so it is unlikely that there will be further refactoring like this. Sorry if this breaks your code, but it shouldn't be too hard to fix up. Most classes now only store data, without anything specific to rendering. The exception is an atlas page, which needs a reference to the texture for that page. Writing a renderer just means going through the data objects and rendering them. Extending a generic runtime is cleaner and takes very little code, especially for spine-c which now uses much less weird C OOP. Eg, extending spine-c for SFML is done in ~100 lines of code . This refactoring also enables use of an atlas with multiple backing pages for C#, XNA, cocos2d, and cocos2d-x. SFML is now the only runtime that supports only a single page atlas. We now have a pretty solid foundation for the existing runtimes. Up next is to bring spine-corona up to date, separate it into a generic Lua runtime, finish the Torque2D runtime, and create something for 2D Toolkit users. We are happy to announce that the Unity runtime is now available, as well as the generic C# runtime which it uses under the covers. As a bonus, we've also implemented an official XNA runtime, which means your XNA and MonoGame projects can now use Spine. XNA and MonoGame weren't in the Kickstarter goals, but we are happy to have them officially supported. The Unity runtime was implemented without any dependencies on other Unity plugins. We have yet to see if Futile or 2D Toolkit would benefit from code specific to those plugins. With libgdx, Corona, cocos2d, cocos2d-x, C/C++/ObjC, Unity, C#, XNA, and SFML under our belts, we have now met the original Kickstarter goals, as well as some of the stretch goals. The runtimes still remaining are Torque2D, AS3 and JavaScript, then we'll move on to editor features. We now have 8 videos on our videos page . These show how to use various aspects of Spine, so be sure to check them out! We are working on more, such as a video that demonstrates how skins are used. Maintaining the changelog has been a bit of a pain to keep up to date, but I know people are curious about what goes into the new builds and the Trello boards only give a high level view of what is being done. I'm going to try to keeping it up to date again, but only for editor features. For a more granular look at what is being done on the runtimes, I suggest reviewing the github commits . Other than some relatively minor features, we're still working on runtimes. The C# and Unity runtimes are coming together and we hope to have something to show soon! Recently it came time to tackle the cocos2d-iphone runtime. No one likes mixing C++ with Objective-C and they are right, it's nasty business. Ultimately we decided to write a generic C runtime from scratch. This allows us to service C, C++, and Objective-C game toolkits with a single codebase. It is also very portable and can easily be wrapped to support other languages, such as Python. We are happy to announce that the cocos2d-iphone runtime is ready for use! It is based on the generic C runtime ( spine-c ), but provides a small Objective-C API to integrate better with your cocos2d code. Using it looks like this . The other news we have is that we decided to make an organizational change to the Spine export format. Previously a skeleton was exported as a skeleton file and a number of animation files. This has changed to just a single file containing both the skeleton and all the animations for that skeleton. This makes loading skeletons faster, especially on mobile where SD card access is slow. A few hundred animations could take a multiple seconds to load if they were in separate files. Also, since this change stores animations centrally on the SkeletonData, runtime APIs are improved by allowing animation look up by name. For those worried about loading all animations at once, don't fret. It really is not much data, even with many hundreds of animations. In the highly unlikely case where someone needs to load a subset of the animation data, it would be trivial to modify the JSON loader for the runtime you are using. The documentation and official runtimes have all been updated to handle the new format. We know there are a number of projects that have code using the old format. We are sorry if you have to change your code! The changes should be easy though. The data itself was not changed, only where it is located, so all your existing parsing code can be reused. We don't change the format lightly, but decided there are enough benefits in this case to warrant the change. We continue plodding along. We will be releasing the Unity and Torque 2D runtimes soon, then we only have JavaScript, AS3, and Lua left! We are super anxious to get the runtimes behind us so we can work on new editor features. It's been a while since we did an update. Rest assured we are steadily making progress! Be sure to watch the editor and runtimes Trello boards to stay up to date. Subscribe to a board or individual tasks to get notified of any progress. The generic C++ runtime is now complete, as well as the SFML and cocos2d-x runtimes which use it. Soon we will also have the cocos2d-iphone and Torque2D runtimes complete, then we'll move on to Unity and C#. After an initial stall due to fixing up some issues with the Spine editor, runtime development is picking up speed! In other news, we have some new videos available to help you be more productive when using Spine. Also be sure to see the advanced examples from the coding workshop which demonstrate mixing, procedural animation, Box2D integration, and more. More videos and proper documentation is in the works! Starting in version 1.2.0, Spine has all new code for dealing with OpenGL, which is used by the editor for all rendering. This affects a lot: window creation, OpenGL initialization, drawing, input handling, etc. Stability on the Mac should be much improved. Note this only affects Macs -- Windows and Linux are unchanged. We'd be very grateful if you can try it out and report any issues you find in the forum post . The new backend took quite a lot longer than we planned. Special thanks to Mario Zechner for wrapping GLFW so it can be used from java . You can see from the commit logs it has been a whole lot of work . There may be a few kinks over the next couple days, but we are happy to get this behind us and to start working in earnest on the runtimes. Time for a Spine update! We've been working hard on a number of things that will increase our productivity over the coming weeks. First, Spine now has installers for Windows and Mac and will automatically download updates, so you always have the latest. This allows us to quickly fix bugs and push out new versions to everyone. Also, Spine bundles it's own JVM now so we are no longer at the mercy of whatever JVM users have installed, resulting in fewer setup issues. We know that everyone is anxious to hear when their favorite runtime or feature will be done. We'd love to give super accurate estimates, but in software development that isn't usually a great idea for many reasons. Instead, we'll give you as much insight as possible into what we are working on currently and what we will work on next. We'll also show the entire backlog of work that is planned. I personally dread project management tools. I'll take indented plain text files any day! However, something more is needed to make Spine's development more transparent, so we've begun using Trello. You can watch our progress on our Trello pages for the editor and the runtimes . You can vote and comment on tasks, and we will keep the votes in mind when choosing what to work on next. Kickstarter goals are marked green, major tasks are yellow, GitHub issues are red. We also needed a better way to accept issues and suggestions from our users. We've decided to use the GitHub issue tracker. You can report bugs or suggest features on our GitHub pages for the editor and the runtimes . New issues automatically appear in the Backlog on our Trello pages, so you can see how they are prioritized. There are still a few issues with OpenGL on the Mac. We will be solving these soon with a whole new OpenGL backend (via GLFW) for all operating systems. Beyond that, we are working hard on the Kickstarter goals and will keep everyone updated with our progress! In other news, the Artist Workshop was a success and we will be sending out the video soon. Next Saturday (March 9th) is the Coding Workshop at 12:00pm PST. Invites will be sent out via email in a few days. Don't miss it! It has been an exciting ride, but finally the Spine Kickstarter is over. Just over $67k was raised and every single stretch goal was hit, except for free form deformation! We are extremely excited about this chance to really bring Spine to a new level, and we owe it to all of you, our backers. Thank you all so much for putting your faith in us! We won't let you down! We've just emailed all the license keys to everyone for which Kickstarter says payment has cleared. Some payments can take 36 hours to clear, so we will monitor them and periodically send out more licenses. If your payment failed, you will get an email about it and 7 days to fix it. If you are receiving multiple licenses, look for a separate email with each license. Many people have asked if we will implement free form deformation even though we haven't hit the stretch goal. The answer is... well, maybe. ;) The initial goals and all the stretch goals are an enormous amount of work. Once finished with all those we'll reevaluate and see if implementing deformation makes sense at that time. We know how nice it would be to have and we want it as bad as you, but we've got to stick with our priorities. :) We will continue to send Kickstarter updates as we make progress on the goals. You can also stay tuned to our blog and we hope to see you on our forums. Thanks again for supporting Spine! Just a quick update to let you know that we've reached all the stretch goals, except for free form deformation! Woohoo! :) Only 3 hours to go. We've been making great progress on the generic C++ runtime , which is now fully functional. We needed an easy way to test it, so we've also built a runtime for SFML , a C++ desktop multimedia library. Everything is working -- skeletons and animations can be loaded and played! Keep in mind we are still actively developing on it though, so the code may still see a bit of refactoring. The Kickstarter has reached tons of new goals! Spine will soon have an integrated texture packer along with lots of other great features. Especially exciting is that we just hit the Event Timeline goal! This will enable events to be timed with animations, eg to play sounds or spawn particle effects. There are only 3 goals left and it would certainly be amazing to hit them all, especially free form deformation! We now only have 19 hours to go. As soon as the Kickstarter is over we'll send out the full version of Spine to everyone. We are very excited to see what you guys build with it! Thanks again for supporting our project! :) The official Spine runtimes are now open source! You'll find them on our github account . Please keep in mind that they are currently under development. The generic C++ runtime is not complete. All the runtimes are subject to change until the dust settles. They are released under the Simplified BSD License , meaning you can use the code in closed source software. Spine is now up to version 1.0.15. This has a number of important fixes for stability. See the changelog for more information. We've been blowing past stretch goals like never before. We've reached both the keyable draw order goal AND the bounding boxes goal! These will go a long way toward integrating game logic with your animations. The next goal is for an integrated texture packer and a number of other very useful features. Hopefully we make it there in the next couple days, because the Kickstarter is coming to an end -- less than 3 days left! It has been really amazing to have so many of you show so much interest and enthusiasm in Spine. We really appreciate all of you putting your faith in us. We are working hard and won't let you down! :) We're happy to announce we've reached our first major feature goal: onion skinning! This displays "shadows" of the skeleton that show where it was in the past and where it will be in the future, allowing the animator to make better decisions about an in-between pose. The next stretch goal up is a nice collection of features. These add some great functionality, especially the ability to key draw order! Søren has put up part 2 of his quick overview videos intended to help users new to Spine quickly get acquainted with the workflow. This time he goes more into details on animating workflow, posing, setting keys, etc. It's up on our videos page and also below, so check it out! Today Nate has been working on bugs and stability while still toiling away at the generic C++ and SFML runtimes. We hope to have all the runtime source up on github tomorrow! www.youtube.com/watch?v=Eg7M43MoPu8 The Spine Kickstarter has passed the C# goal! This means that we will create generic runtimes for all of the major languages that we targeted: Lua, JavaScript, C++, AS3, and C#. The stretch goal up next is Onion Skinning, which is the first major non-runtime feature and will be super useful to visualize movement over time while tweaking animations. Søren has created a quick overview video that will help users new to Spine quickly get acquainted with the workflow. It's up on our new videos page and also at the end of this update, so check it out! Nate has been heads down for some time now, working hard in C++ land. Progress is going great and within the next few days we will have support for the SFML game toolkit! This will help validate the Spine C++ code, then cocos2d and cocos2d-x will come soon after. After that we will do Unity Futile and 2DToolkit, then move on the stretch goals. In the next few days we will release all of the official Spine runtimes under the BSD license on github: libgdx, Corona, and SFML, as well as all future runtimes. This will enable the community to see our progress, easily fork the official runtimes, and submit pull requests. We believe this is the best way for Spine to gain widespread support on all kinds of toolkits. There are less than 5 days left for the Kickstarter! If you can tweet, blog, or otherwise spread the word about Spine, that would be fantastic! :) <url>~$1300 from the Generic C# goal! This is fantastic because it means all of the most common languages will have generic runtimes, and also that we are close to reaching some really cool feature stretch goals, such as Onion Skinning. We did a new release today, version 1.0.10. This fixes some minor issues as well as some major ones. Most notably it fixes some issues when running with Java 7 on a Mac. Even though the Kickstarter isn't over, we're working hard on Spine so we can reach the goals as soon as possible. There is only about a week left, so be sure to spread the good word! :) It's been a couple of very busy days here but it's time for a little update. Yesterday we added another pledge level at $45. This pledge and all pledges greater than it, gives you an automatic spot on our featured page on <url>øren We've hit our goal for creating a generic JavaScript runtime! This means users of PlayN, Construct 2, cocos2d-html5, and other JavaScript-based toolkits will be able to support Spine relatively easily since everything except the toolkit specific rendering will be taken care of. We will be happy to provide assistance and even implementations for these toolkits once the Kickstarter goals are fulfilled. The next goal is the generic C++ runtime. We know there are many C++ users and toolkits out there, so please help us reach out and spread the good word! :) Thank you all for your continued support! Be sure to check out the Artizens Kickstarter which will be using Spine to do their animations! After much deliberation, we finally came up with stretch goals for Spine! The number of requests we've received about which toolkits to support has been mindblowing. We really want to make everyone happy and we think we have come up with a great approach: by providing generic toolkits for many programming languages, implementing new runtimes becomes a breeze. This has all the benefits of officially supported and maintained runtimes, but also allows the gaming community to easily implement their own. We can work together with the gaming community so Spine can support any toolkit! Please check out the Spine Kickstarter page to see the stretch goals. We are really excited about the future of Spine! We've already seen some really great work done with Spine. For example, here's a work in progress animation provided by ODI EntertainmenT, a fire dragon for their game Dragon Warrior (working title). Note: This is a 15 fps GIF sequence, the final version running in the game will look much smoother. We've drawn a lot of inspiration from the huge response to the Spine Kickstarter and we've been hard at work. In only a week and a half we've done nine releases to improve Spine, add small features, fix bugs, and improve the runtimes. Tonight we uploaded version 1.0.8 which includes a new Spine runtime for Corona . Now you can easily use Spine animations in your Corona games! Join us tomorrow where we will make a cameo appearance on Corona's Google hangout . We mean business and are already moving on to the cocos2d and Unity runtimes! We realize that everyone wants to know what our stretch goals will be, but we want to be sure before making more promises. We can say that our stretch goals will be more runtimes and some useful, evolutionary features. Please stand by for more details (soon!), but in the meantime you can trust that we will do everything we can to make official runtimes available for all the popular game toolkits, as well as help those in the community that want to develop their own. Thanks so much to everyone for your support! The response from the gaming community has been phenomenal! It is really fantastic to see everyone so excited about Spine. Lately we've been working on a few things. You can see the full changelog . We've fixed a number of small bugs and added some minor features. We've added an import feature so data can be brought into Spine from other applications. We've been working on the libgdx runtime, adding some mandatory features in anticipation for developing runtimes for other game toolkits. We will start on other toolkits most likely in the next day or two. We plan to get the promised toolkits complete as soon as possible so we can implement even more toolkits. We won't say exactly which ones yet, as we don't want to over promise, but you will know as soon as we are sure! @Markus Lange, Spine exports data to a JSON format. Maybe you can write something for Blender to be able to import this format. @Sirawat, it is possible to use it to create levels, however I think there might be better options out there for this, both with and without bounding boxes. Another option to look at that looks quite promising (haven't worked with it myself yet) is R.U.B.E -Søren @These Brothers Games, on our Trello board we have this feature <url>øren @Tim Day, you can follow the runtime progress here - <url>øren @NexusSteve, we will most likely make the workshop videos available for a small fee in the future. Afraid I can't yet say when. - Søren @Craig, we've been a bit busy fixing some mac problems for the last four days. Runtimes will be picked up on again today. We're planning on doing a more detailed update later on. @Mohamed, you'll just need to wait for Kickstarter to check again. If you want more specific information contact Kickstarter directly and ask them about it. Once it goes through, we'll send out the license for you, we check for this stuff a couple of times every day. Thanks for backing us, sorry to hear that you're having problems with Amazon. Download links should now be working again and we're monitoring the server so hopefully it won't happen again. For those of you having a problem downloading. It seems like our server is being hammered from the massive amount of downloads being tried. We're working on getting fixed ASAP! Once we have it running smoothly again we'll let you know. Sorry for the inconvenience. @S.D, cool, glad to hear you found it easy to use. Regarding your question. Currently there is plenty to do with getting all the stretch goal runtimes and features sorted out. So if we do add that, it will probably take a while. @Craig Hinrichs, thanks! We have now started sending out liceses. Thanks a lot everyone. We'll be making an update and we'll try to answer the questions many of you have been asking. We'll also update you on how the licenses will be sent. @Pranart Dechpokket, Spine already supports Gideros, see here: <url>ément Vayer, I guess it depends on what you are doing. I think a more important trick is this: right click will toggle to the last used tool. This means you can click rotate and then translate, then switch between the two just be right clicking. This makes it quite rare to have to go to the toolbar and click a tool. @Evan Z, thanks. We already made a thread on reddit, but can do another one once we hit 48 hours left maybe. @Duke Nukem, for something like that, you would want to do a bunch of image switching combined with the skeletons. I'm afraid doing a tutorial for that at this moment isn't possible, it's a lot of work and with the Kickstarter ending soon, finding time to do it will be difficult. If you get started on doing it and run into problems you can always register on our forum and ask more specific questions, then we can try to help there. Other users might also have an idea of how you can do it. @Greg, Afraid I don't know much about Parallella, but if it supports Java and OpenGL it should run. @Jordan York, @Jason S, @Andrew McDermott, thanks guys, it means a lot :) @Wesley Robb, we had a talk about it, and it doesn't seem like it will be super difficult to do. We'll give you a more detailed update about this once we have gotten a some of the other things sorted. -Søren @Daniel Branicki, we've added that feature to our list, it will be implemented together with different controls for trackpads. @Duke Nukem, I guess it all depends on the graphics you make, it shouldn't be a problem to use Spine for it now. We've already seen a couple of people using Spine to create top down style graphics. @Craig Hinrichs, the runtimes support different sizes of images switched on the fly you can have multiple sets of images. @Duke Nukem, Most features will be implemented, but it will take longer than if we reach the stretch goals. There will also be other features implemented which is not currently in the stretch goals list. We plan to support and expand on Spine for a long time :) @wetSpot, a Spine license gets you all future updates to Spine. Hey guys, sorry for the late replies, it's been a super busy day. @Tim Day, It's hard to say exactly, but you can probably expect the Unity runtime within 3-4 weeks, maybe sooner. Futile will be the one Nate works on first, then 2D Toolkit. @Robert Lovelett, Vectors are indeed easier to scale, one way you can get around this is to have multiple sizes of your images, the runtimes will support this. Of course this means more data, but DrSchizo sounded like he might have a solution for that. That's not something I've used myself, so I can't really say much about it. @Moritz Voss, thanks a lot! We are looking forward to see what you guys will come up with using Spine :) @John Z, We talked about generic C a couple of days ago, I'm not entirely sure what the verdict is on it though. I'm sure it's doable though. @Lyle Cox, I believe we got things sorted :) @Matthew Campbell, documentation for Binary is on the way. @Ockonal, can't wait to see what you've all been doing with the Trial version :D Version 1.0.11 was uploaded about an hour ago, this fixes an issue with Windows 7, so if you're having problems with the Trial, go grab the new version. Nate is working really hard trying to make everything come together. Let's get to C# and then we can start going for some more features! :D Thanks once again for all the support! It really motivates us to make Spine better and better. - Søren @Robert Lovelett, you know you can try out Spine right now? Yes, it can be used to create cut scenes. Spine supports multiple skeletons in the same project (aka scene), so you could have multiple skeletons animated so they appear to interact. I don't know what the SWF/ScaleForm/etc does that makes it large. For Spine, the file size really depends on the images used. The Spine animation data is quite small, especially the binary format but even the JSON zipped is pretty small. I suggest looking at using JPG to reduce image file size. You can use an indexed palette PNG, maybe 16 or 32 colors, to store transparency information, then at load time combine the JPG with the PNG so you still have transparency. Spine animations use interpolation, so you can pass any time to them and they will pose the skeleton for that time. If you use time that comes from your audio processor, then the animation will match the audio. Using Spine for cut scenes is one of the expected use cases. Honestly though, most usage is not for cut scenes, so we haven't been focusing a lot on this use case. Eg, skeletons are ordered based on the order they are added, and this draw order cannot be changed or keyed. Ideally you could drag and drop skeletons in the tree to change the draw order. This is on our task list, but we haven't gottten to it yet. Anyway, I suggest grabbing the trial version of Spine and see how creating a cut scene goes. A great feature for cut scenes that we won't be able to get to soon would be an animation mixer. This is similar to the dopesheet, but you move around whole animations rather than keys. Without this, each skeleton in your cutscene probably only has a single animation, making it somewhat harder to reuse and retime animations in the cut scene (you'd have to copy/paste and move around keys instead). @DrSchizo, we're discussing it internally, can't make any promises. @Ubu, the generic Lua runtime should make Moai integration relatively simple, we'll be there to support developers who want to make it happen. @dsideb, when the Kickstarter is over we'll continuously be improving Spine. New features will just not be implemented as fast as if we reach the goal here since we'll also have to work on other things to be able to make a living. With that said, FFD is one of the things we really want to do at some point, we know how powerful it is. @Raffaele Esposito, sorry had a bit of a brainfart there. It's for as many games as you create. One feature pr. game. Just keep in mind they need to be released games. @Raffaele Esposito, it is for only one game. @Lyle Cox, an update is in the works, will send it out soon! :) @DrSchizo, currently you can configure the skeleton with the images you want in setup mode, then export as PNGs and Spine will export using the images you have attached. Repeat this process with different images visible in setup mode to export spritesheets that look different. Note however that CPU is often not a bottleneck in games and the additional minimal overhead of using skeletal animation is likely not worth using spritesheets. @Ronny Bangsund, we wan't to support as many people as we can. We'll do our best to support Torque 2D users on the forums once we have the generic runtimes done. Thanks for spreading the word! :) @Duke Nukem, it looks like Torque2D could be supported by using the generic C++ runtime, a stretch goal that we are just about to make! @Jordan York, awesome! :) @Hussain, it's been busy times lately, but we are working on it. It will likely be the next runtime available. If forced to throw out a noncommittal estimate, I'd say within 2 weeks. :) We've added a new pledge level of $45. This pledge is now in effect for anyone who pledged more than $45. Tomorrow we will write a more detailed update. We've been working hard on runtimes and some fixes to Spine. More examples will also be added and we expect a new version to be released tomorrow. Almost there for the C++ goal. Thank you for your continued support! - Søren @Wesley Robb, I think we could support a C API relatively easily based on the C++ API. @Raffaele Esposito, possibly we could support Orthello, but not until all the other work we've promised has been completed. @Cameron Owen, We've talked a bit about doing some work in this area. It would be at a later point should we do it. The possibilities with that are definitely interesting and we know how much great stuff often comes from third parties. @Craig Hinrichs, yes, the cocos2d and Unity runtimes are next and we are currently working on them. Rest assured we are sticking to our initial goals! The stretch goals are for after that. @JJ Our original goals have not changed, so we will be supporting Unity just as planned. @Ricardo I can't say if there will be changes to the window at this time. It is however unlikely, if there are bugs we will of course fix them. Thanks again for the support everyone. -Søren @Arly Rampen thank you for the support! It's 4:30 in the morning here, so it's time to go to bed. We will do our best to answer all questions that might arise on the new stretch goals as soon as we can. @Peter Cobcroft, this is actually possible to do to a certain degree with the current implementation. You would just apply small randomized rotation to select bones in the setup pose, this would be done in your game and not during animation in Spine. @Craig Hinrichs we have the full version available for purchase on our website, this is a bit counterproductive to our Kickstarter, but since we don't receive backer information before the Kickstarter ends and a lot of people wanted to start using it now, we made it available. @Benjamin Green Free-form deformation and how we will implement it, is not set in stone also it is something we can iterate on and improve should we reach the goal. Being able to change the interior of the "mesh" is indeed powerful, and should we reach the goal, it is definitely something we will consider. @Andrew McDermott Thanks, the support so far have already been amazing. Help us spread the word of these new stretch goals to make Spine even better. We will be using Spine for our own projects in the future which means features are likely to be added over time, even features that are not yet listed here. Spine is very dear to us and we will keep improving it. @Andy Lundell, we will document the format soon. We wanted to get a few runtimes done to be sure it's solid. We've now got two and a half runtimes done, and indeed it turns out we had to make some minor changes. I don't think it will change any more though, so we will document it soon. @Ricardo, it could be made to look like a native window, but it wouldn't be so pretty. :p We went out of our way to have a custom frame. Also, you'd lose the fullscreen button. You'd also lose this little secret: right click the close button to toggle always-on-top. @Ricardo, Spine is written in Java using libgdx and it's 2D scene graph called scene2d. This means all of Spine is rendered at 60fps using OpenGL, and that it is exactly the same on each platform. This approach does not look like a native app, but has many benefits. :) @Jordan York, we are working on more documentation (a quick overview is available on our site right now). We'll also consider make video tutorials at some point after the workshop videos. The workshops allow you to ask questions in real time, which some people may like. In the meantime, I would suggest reading a book: The Animator's Survival Kit by Richard Williams. @Jay 'Listege' Yoo, not sure what you are asking... of course you can have different textures for different body parts. Maybe ask a more specific question on our forums? @Arly Rampen, no, not yet, this didn't make it into v1.0. However, you an attach the image to 2 different slots, which can have different draw order. Then instead of changing the draw order, just hide the image on one slot and show it on the other. @Shawn Blais Skinner, oops the download is fixed now, sorry! @DrSchizo, it would be very hard to keep the bones in the same position. Eg, it's very easy for shoulders to need to appear in a new place. Animations can still be reused across skeletons, they will just need a little adjusting. I think you'll find with a little practice you can create new animations and repurpose existing ones quite fast. @James Pollock, we hesitate to make promises, but we will be supporting as many toolkits as we can. Starling is on the list. :) @Matt Jones, yes, the runtimes are only available in the full version though. It will be sent out to the Kickstarter supporters as soon as the Kickstarter is over. It's also available on the website right now. @Darien, to change an image during an animation, in animate mode click the visibility dot in the tree to show or hide the image you like. After doing that a yellow dot will appear next to the slot in the tree, denoting that a change has not yet been keyed. Click this dot to set the key. @DrSchizo, I am sure you will find it quite easy to animate. Existing animations can be repurposed, though joint positions are likely in different places so you'll have to tweak them. @Andy, certainly! :) We plan to continue supporting and even adding features and runtimes to Spine, even if we somehow manage to find some time to work on our own games (which isn't looking terribly likely any time soon, considering how much work Spine has been lately!). @Daniel Quaroni, swapping images doesn't use rules. You can hide or show an image at any time though. Hey guys, not quite the update we were pushing for today, but I thought I'd give you all a little heads up, about what we are doing at the moment. We're still a little in disbelief that we made our goal so quick, it's super awesome, so thanks for all the support! We've spent most of the day working on Spine, and going over how we would handle the next 26 days, more specifically how we could best make sure that Spine will be available to as many different toolkits as possible, and we think we have a pretty good plan for it now. We're not entirely ready for a detailed update about this, since we feel it's important to make sure we can actually deliver eventual stretch goals, instead of just rushing out with them. Thank you once again for being super awesome! -Søren We've added a bit of documentation on our website <url>"Bounding Box" feature, is it possible to create a 2D game level with this program? Does this program support large stage layout so I can make a platformer? (So I can check where the character's feet will be with the bounding box feature) And, WITHOUT bounding box feature is it possible in anyway to use this tool to aid 2D game scene creation? @Søren - awesome! Sorry I did not see it on Trello. That's great! loving spine! You guys are awesome and doing great at delivering on the runtimes. is there anyway that we could get an option to make the "dopesheet" could show all the keyframes for bones below the current bone? so if i select the hip, i can see the thigh and foot's keyframes? in some sort of order hierarchy, this would let me rapidly redo sections of an animation (such as slow it down) that i need to tweak. today i need to go on a treasure hunt to find all the keyframes. this project is awesome! it is helping me deliver on my kickstarter (heroes of steel)! Any news on the Unity implementation? Looking forward to an AS3 runtime update! Delvers Drop that just got funded are using Spine and have given you guys a shout-out on their latest update thread. :) <url>~ minutes with the demo I had Spine Boy doing an acceptable punching animation. In my next 15~ minutes with the full version, I had the male goblin doing a passable stab attack. Very impressed. One thing that took me awhile to figure out was how to do more than rotate the bones in pose mode - to drag a hand and have the whole arm bend using IK. It's simple, once you know you need to select multiple bones. Until then it was pretty confusing. Really hoping some of the rough edges with docs and menus can be squared away. Little things like an installer go quite a long way too. I'd rather have something I can use right now though, so again, great work guys. Congratulations! It wasn't quite 5x funded, but good enough :) The Mac version crashed on its first run, but worked fine since then. A known bug? I've received the email, but when I try to follow any of the download links for the full version all I get is this: Warning: ZipArchive::addFile() [ziparchive.addfile]: Invalid or unitialized Zip object in /srv/www/esotericsoftware.com/spine/full.php on line 37 Warning: ZipArchive::close() [ziparchive.close]: Invalid or unitialized Zip object in /srv/www/esotericsoftware.com/spine/full.php on line 38 Warning: Cannot modify header information - headers already sent by (output started at /srv/www/esotericsoftware.com/spine/full.php:37) in /srv/www/esotericsoftware.com/spine/full.php on line 56 Warning: Cannot modify header information - headers already sent by (output started at /srv/www/esotericsoftware.com/spine/full.php:37) in /srv/www/esotericsoftware.com/spine/full.php on line 57 Warning: Cannot modify header information - headers already sent by (output started at /srv/www/esotericsoftware.com/spine/full.php:37) in /srv/www/esotericsoftware.com/spine/full.php on line 58 This user's account has been deleted. Congratulations guys, this looks really promising! Awesome job guys! Wow. Blown away... just tinkered with the Spine demo last night, and hot damn if I didn't just animate the first character walk-cycle in my life that didn't look like absolute crap! The bit in the pitch about being "programmer accessible" not only wasn't a fib, but it wasn't even an exaggeration. It was super easy and straightforward! Question; in image export mode (rather than JSON + runtime, video files, etc) instead of exporting individual frames, would it be possible to export frames to a sprite-sheet? That could be useful for retro low-res pixel art animations (which we could still do, but then we'd need to add our own scripting to assemble the sprites). Congrats! Can't wait to use it in an upcoming game:) Spine is awesome! I cannot wait for the plugin for Unity. But you will only support 2dtoolkits and fugile? Is it possible to support ex2D as well? It is a very popular 2d plugin for Unity. Thank you. And congrats for a so successful Kickstarter campaign! Congratulations !! Looking forward to using this tool in one of our next projects. I know we spine didn't hit the Free-form deformation stretch goal, but is this something that will possibly come out in the future? Congrats on the finished goal! Look forward to seeing (and using) your program. Any chance of freeform deformation being added at some future date, just since it would still be a useful feature to attract new customers? Congratulations. I can't wait to see spine support gideros engine. Congrats. Cant wait to get this rocking Congratulations. All but one goals were met. :) Thank you very much for your dedication and perseverance. Spine is genuinely a joy to work with and it has inspired me to pursue my current goals just that much harder; you've removed barriers. Happening on this Kickstarter has been very rewarding personally and I look forward to working with Spine over the years. I hope the video workshops are made available through some kind of donation or purchase mechanism shortly after they are completed! Once again, congratulations! And keep up the good work! Champagne!! :D Congratulations! I'm looking forward to spending a few hours with Spine to see if it'll be a good fit for Last Stand at Iabreth :] Come see <url># runtime to be completed? That'sjust what I need to use Spine with my Unity 4 project. I am really looking forward to the JavaScript runtime so we can use this in our current project. Keep up the awesome work! @Esoteric : My GF is debating whether to pledge or not, she is mostly interested in animating cartoon style stuff and exporting them as movies. Is something like that possible? @EsotericSoftware Looking forward to the AS3 runtime so we can write an importer for GameBuilder Studio (<url>"undo/redo" function somewhere currently, or planned? In creation last night, I noticed that I couldn't undo moderate tweaks to anything I recently touched. @Esoteric Software: Will i be able to load the information for the Animation/Bone information in LibGDX using Assetmanager? ( I * believe the the textureatlas shouldn't be a issue and is already supported..but i guess Nate or Mario would know best.) THANKS Again! When I signed up I was hoping for this to reach the AS3 runtime goal. Now it seems to land on more features than I could dream of! I'm so looking forward to start using this amazing tool :) Will you be working in an Auto Key feature. Auto key is something I've grown fond of over the years animating in Maya. And I could it as a very useful tool to speed up workflow. Just up'd my pledge to get both workshops on video $115. And another license. This is so totally worth it. I have high hopes for cocos2d-iphone being native objective-c code. If not, it's not that big of a deal as I am sure we will be working together to improve and make things better. Still.... totally worth it. Great Job! Quick question: Where can I submit bugs that I find? Can I purchase or gain access to the recordings of the workshops at a later date? My puppy has an unfortunately very expensive dental appt coming up and while I want to support Esoteric by pledging for $150~ for workshops... I just can't justify spending that money over my little dude. I really hope we get a big jump on the last day (at least 5k). I'm excited for slot images and backgrounds, but even if we don't make that stretch goal this is still one fine piece of software :) Good job! I saw you guys on reddit yesterday, so posting there was a great idea. ;-) @EsotericSoftware just wanted to say Thanks for all your teams hard work and I HOPE to see more tools from you guys! @EsotericSoftware Do you plan to release Spine at the Unity Asset Store aswell? That would easily help a lot of developers with their work. Anyway good luck with the last stretch goals! Project looks awesome, have tried to use software like this in the past but they were not implemented well at all and very clunky. This looks much more intuitive and user friendly, keep up the good work! What formats exactly will this be able to export the animations as? Backing for great dev tools running natively on Linux!! Thanks, Esoteric. Also, in the pitch, hearing "...creating animations become so fast and easy, even programmers can do it!" was a siren song in my ears! @Esoteric Software, hey quick question.. looking to upgrade my pledge to the 150 coding workshop... but my question is do I still get access to both workshop recordings (art and coding)? Thanks!! Will Spine support dynamic skeleton restructuring, which will allow for adding, removing or changing the bone structure without breaking the animation? An example of usage would be a character with a sword hanging from his belt, where the sword's parent is the character's hip-bone. Then, at a later keyframe, the character draws his sword and the sword's parent will now be changed to the character's hand. If not, will this be considered for a future version? I have a thought for an enhancement and I'm wondering if it would be possible? Future update after Kickstarter maybe? I have a collection of bone animations in .bvh format that I use as a starting point for 3d character animations. I'm thinking it would be great if Spine would let me import them by defining an x,y,z rotation and then recreating the animation in 2d by projecting the bones onto a plane. I think this would be very useful. Regards, Hoping you hit the level for the integrated texture packer. Do you think it might actually make it easier for you to support all these runtimes? For instance, it could drop the reliance on 2D Toolkit and Futile for Unity, removing the risk of future updates to those engines forcing updates to Spine's Unity runtime code. Congrats on all the goals made so far! @Esoteric Software Sorry if this has been asked already but I wanted to know what the update for the cocos2d integration is? How's it coming and when do you think we will get to play with it? Thanks! Is it just me or does this project get backed like hell? ^^ Lovely to see those milestones go by! I don't have an extra $3K, but I would love to see this work in Gamemaker!!! Is unity planned for one of the early releases? Awesome-Sauce! Great video. I did learn a few more things in this one that will help me with the tool. I have to say though, even without these tips I have been able to be productive and create things I like. Though they don't feel finished this video explains how I can continue with them and add on to the work I have already done to make them feel more life like! Hi, great videos ! and congrats about the newly reached stretchgoal. Something caught my eyes in a video about the keyframe. I'm guessing the most common ketframes will be translation and rotation, but the ordre in the UI is actually translation, scaling, rotation. Would'nt it be better if the order was translation, rotation and then scaling, as it would avoid having to skip over the scaling button to click on the rotation one. I know it's only a little thing, but if it can help gain productivity... If it happens that scaling is used more than rotation, then nevermind :) We just crossed 40K! Congratulations on reaching Onion Skinning. So thumbs up for having this in the "can forget about money spent" 30 dollars amount is what I am saying. This is going so well and I am having my figures crossed for bounding boxes stretch goal. I think this product really hits just at the right point on the price as many of us game makers do not make a lot, and many of us give our stuff out for free. So the nearly free price of this product is great and it's expanding feature set, ease of use and quality really is impressive. @Greg - It already runs on Linux as far as I can see - You can grab the trial version from their site and test it on Parallella, Not sure if it will work 100% or at all... But it is worth a shot. Not sure how to ask this but I backed the Parallella KickStarter for basically this purpose (game dev). Any chance of Spine running on whatever is required or Parallella? (some kind of Ubuntu derivative, iirc) @Esoteric Software - Just for a point of reference to what I am wanting to make - See the video below <url># has been achieved. Now onwards to Onion Skinning! Can't wait for the license :) I must be blind - I see the JSON format description on the main website. It will be nice to have both that and the binary formats fleshed out down the road, but consider my appeased :) I may have missed it somewhere, but is there currently or planned a full description of the data formats that come out of Spine so people can write their own parsers or runtimes? I've seen mention of a JSON output, so I assume that at least is open, but I'd love to see a full specification or file format documentation aimed at developers. Would it be possible to add an extra $25 or $30 for every extra license we want on top of the 2 licenses available in the current pledge levels? i.e. pledge $140 to get the $115 pledge level with an additional license (for a total of 3 licenses) Would like to see Python support. Cocos2d, pyglet, pygame. If you could do a generic C API that could easily be wrapped that would work too. Would also like to see documentation so we could build our own runtimes if there is no native support. This is a fantastic project and it's great to be a part of it. Looking forward to the release of the runtimes! @Robert Lovelett: in AS3, you could use DMT Library that "provides run-time dynamic (and fast) rasterize vector images to bitmaps and generates the atlases". In other words, with this library, you can generate the sprite sheet at runtime from a vector image and soon a MovieClip. You can therefore scale the vector image to the right size with no pixelisation and only then rasterize it to bitmap. More information here: <url># level :D Guess we know what we're gonna do! @Esoteric Software : some widely used frameworks like Flixel of Flashpunk work only with spritesheets. Precalculating spritesheet would work only if you have few different combination. But imagine a game where can change hair, face, skin color, clothes, weapons like any RPG game, the number of sprites to create would be way too important (several thousands combinations). And it would simply not work if you want to make a game like Artizens where players can make their own skins. I came here to kick ass and chew bubblegum and now I want to code In C++. c++ done. C++ here we come :D ... just $137 more @Esoteric : Cheers! It's just that the pledge desc. does not specify that. I will be upgrading my pledge in a few days. @Esoteric is the 45$ pledge only for one game or does it include more than one games made with spine? Maybe you are saving it for later, but I think you should send out an update about the new pledge level rather than just the comment here. It is a lot more likely to reach the 584 people currently signed up for the $30 tier. I forgot one thing in my previous comment: such a system will have the advantage to be directely compatible with many frameworks without any additional code, since a lot of them already manage spritesheets animation. Spritesheet animation is fare more CPU-efficient than dynamical animation. Some framework are made specificaly to handle spritesheet, like Flixel and Flashpunk on Flash. I know spine can generate spritesheets, but using this solution would take off one of the best advantage to this software, that is using the same skeleton animation for different characters. Therefore, it would be really useful to be able to generate dynamically the sprite sheets in the different available langage. In other word, once given the different images to use (arms, legs, body...), the API could generate directly an image that could be used as a sprite sheets, including all the animations frame by frame. Will that funtion be implemented? less than 600 $ away from the C++ stretch goal, how far do you think we'll make it? Any way of getting it working with Torque 2D would be great. More people in that community are interested, so we're all spreading the word :) Hi, Any dates for Cocos2D iPhone runtime ? @ Jordan York - Yep I am :) Hahaha! @Duke - you really are everywhere I go on Kickstarter :p @Esoteric Software - I purchased the animators survival kit, as you recommended. I look forward to reading it next week when it comes in. @Esoteric Software - Hey, I am a video game character that has been forced into the real world due to economic issues. Ahhhem Gearbox Software... I am currently working as a part time developer in between my day job (Manufacturing work) and my new found passion 2D Video game development. I am currently backing at the 30 dollar level. I am using the Torque 2D game engine. Which is open source and very awesome. Any way my question - Can you guys as a stretch goal make torque 2D a part of the Spine development platform? Just curious. This comment has been removed by Kickstarter. Since your original goals included unity could you also add support for the orthello 2D framework(both free and pro)? Also, I'd like to second Wesley Robb's request, C support would be welcome. I'm really excited about the 28k "Generic C++" stretch goal. It will add tremendous value to projects designed to work cross-platform with the core engine built in C++, and as @Wesley mentions, it will make binding to many other languages quite easy. Now that Spine is on track to reaching to 28k stretch goal :) Would it be possible to create the "Generic C++" with a C wrapper/interface or even just use standard C? This would allow binding to many languages really easily. Eg. Python, Lua, R, Go etc. Also it would allow C dev's to use Spine natively as well. Thanks for the time and effort taken to create this amazing piece of software! I'm all for the out of the box integration with popular tools/engines, but is there any chance of the tool itself being scriptable and extendable? Would be nice to be able to create our own additions to the system so we can better integrate with whatever game/engine we're working on. We can't wait to get our hands on the Unity runtime. :) Did I miss the cocos2d announcement? I thought those were next after Corona? @Esoteric Thanks again for your detailed replies. Mac OS X Mountain Lion apps have the full screen icon on the window frame, so it would be relocated, rather than lost. The current Spline fullscreen button does not seem to work on OS X ML anyway, it just maximizes the window. Cool stuff about the 'always on top' thingy! (Although I think it should show its state in the UI somehow). Anyway, keep it up guys! Waiting to use this in my next game. Although I am going for an interview and so may end up having to do non-game work during my days: shock-horror ! Oh well, spine will at least be one of the things I use in the evenings... Your Kickstarter page is looking slick, good luck on reaching the stretch goals. Hi guys. I love that you are doing an open format but I hope you continue to mantain the unity (futile and 2d toolkit) plugins in house. I backed the other project Spriter and the 3rd party support is hit or miss (as you might expect). I supported this project to have more polished and solid runtimes so I really hope you keep that up. :) Just backed you guys, played with the editor some. Awesome work guys! I hope all the features are implemented eventually even if it doesn't meet all the stretch goals. Hopefully it will reach the stretch goals though.. This is great software even at this stage. In your description of the free-form deformation, what's the advantage of only allowing deformation along the edges of an object? Personally I've always found that a simplified mesh gave me far more flexibility when rotating characters, as it allows me to affect the interior of an object in order to create a sense of form. I am dying to use this today. Where can I find out more information on getting the full working version? Will that be when the kickstarter is over? Can't wait to implement this. This user's account has been deleted. One of the things I'd like to see is natural movement, rather than smooth/robot/space movement - it's all well and good to use inbetweening algorythms with envelopes - but if there can be a way to introduce random variation (also good if animating a crowd). Random speed changes, or random begin/end/middle target point variations. Twitches, ticks, hesitancy - all these things help something look more natural in its movement. @Esoteric: Cool, thanks for the info! But still, can't a Java+libgdx window be given native appearance on the different OSes? I am not complaining about this very minor think, just curious about why it cannot be easily done. ;-) Is there a documentation for the format of the outputted skeletons and animations? The sample files on your website look pretty straightforward, but I'd feel more comfortable if I had documentation. Spine is looking amazing, the UI is beautiful and responsive. Also, being able to keyframe each attribute separately is great. Having a single keyframe for all the image attributes like Spriter does is crazy. I'm curious: what framework/technology did you use? On the OS X version it's somewhat startling to have Windows-like maximize/minimize window buttons rather than the standard OS X ones. ;-) Thanks :) I'll make sure I check that book out. I haven't done any animation for years, and I didn't really have a strong background before I stopped, but I'm looking to get back into it. Will you consider making video tutorials of the basics, or is this something that I should expect from the workshop videos? I've decided to back this in the hope of the Team supporting Monkey (www.monkeycoder.co.nz). I would love to see a support for Construct 2 (or at least documentation to let me write it!) Love the tool. Great work! +1 for Flixel integration! I prefer to work in Gamemaker myself, so if you get around to other platforms, +1 for Gamemaker integration =] This user's account has been deleted. Can I use different textures for diffrent part? ex) Use different texture for upper body, head, legs I hope you make a porting for Unity. I can't download from the website in either Chrome or Firefox. When I click the "Windows" button, it just downloads a 1kb file named "win" Thanks for putting out a good product. Admittedly I don't know how the runtimes are done exactly but I am making my game in XNA. Perhaps a simple API or some boilerplate code that could be used to create our own runtimes would be useful since everyone's engine will be different. You say there is currently a runtime for libGDX. Can we get that? will there be a starling runtime ? @Esoteric Software : if I have access to a complete animation set (for instance walk, run, jump, crawl, kick, punch, stab, shoot, special attack, etc.), I would definitely design the character in order that joint positions are the same than the original. As far as I'm concerned, a specially design tool or at least a subsection in the forum could therefore be very useful. How do you swap bone-attached-images mid-tween? Can you? It's a great project. It would be awesome to have a set of already made animation (walking left, right, top and down for instance) or an online library that would allow users to share their work. If I have to spend time animating a character, I would rather spend it improving somebody's work (and sharing the result with everybody) that redoing it from scratch. @EsotericSoftware, well done guys, I have read some of you comments on your eagerness to make games with this tool yourselves. Just remember the people that made the most money in the gold rush were the people selling pick axes. I think this is such a good product you could go a long way with this! I guess making games is more fun though :p Looks good! Will/does spine support multiple images for a single element with swapping based on rules like bone position? For example, I might want to have multiple images for a torso to reflect its rotation during a walk cycle and have the choice of which one is shown in a given frame by using a bone that I use to represent the torso rotation. I'm 1man - Indie developer. I'm developing in Corona SDK, And I hope to use Spine's great features in my project. GOOD LUCK! :) This is amazing. Having support for all of those platforms would be nice. Hopefully the extra funding you get will allow this. I just backed this. Awesome project, it will help me with making my own games a lot! :) Also, I'd love to see LÖVE supported! :) Hey guys, great fan of your work. had to back you! gogo libgdx! I just wanted to throw in my vote for Flash AS3 / Starling support! I'm a Spriter Backer, but they are really dragging their feet, and the progress here looks amazing. Really glad to see you have hit your target guys, software looks awesome! Like others have mentioned, really hope you get enough cash to add GameMaker support! Hi Guys, I'm very glad that you exceeded your goal! I backed you up a couple of days ago, I wanted to complete the 6,000 for you guys to get motivated. I normally use toon boom and am seriously considering spline for much more than just games. I'm very anxious to try the software in its full capacity. I wish you all the best of luck on your upcoming challenges, and I really hope you make a lot more money. Greetings from Mexico. :) Visit my site if you wish :) <url>"another project" a year ago for the Unity plugin and they left it to the community. You guys are my only hope! ;) Good luck! Best of luck on this, I can certainly make use of it and it looks really good. (Silverwolf user of LIBGDX mobile development framework)